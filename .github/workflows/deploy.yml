name: deploy

on:
  push:
    branches:
      - feature38

env:
  AWS_REGION: ap-northeast-1
  IMAGE_TAG: ${{ github.sha }}
  SERVICE_NAME: hoteler

jobs:
  deploy:
    name: Deploy app to AWS Fargate
    runs-on: ubuntu-latest

    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1800

      - uses: actions/checkout@v2

      - run: docker-compose up -d --build api web

      - name: Cache bundle
        id: cache-bundle
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: gems-v1-${{ hashFiles('Gemfile.lock') }}

      - run: docker-compose exec -T api bundle
        if: ${{ !steps.cache-bundle.outputs.cache-hit }}

      - uses: aws-actions/amazon-ecr-login@v1
        id: amazon-ecr-login

      - name: Push nginx image to ecr
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SERVICE_NAME }}-nginx
        run: |
          docker build \
            --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
            -f nginx/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Push ruby image to ecr
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SERVICE_NAME }}-ruby
        run: |
          docker build \
            --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
            -f Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # CodeDeployを使用してECSにデプロイ
      - name: Deploy to Amazon ECS
          id: deploy
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: ${{ env.ECS_SERVICE_NAME }}
              cluster: ${{ env.ECS_CLUSTER_NAME }} 
              wait-for-service-stability: false
              codedeploy-appspec: appspec.yaml
              codedeploy-application: ${{ env.CODEDEPLOY_APPLICATION }}
              codedeploy-deployment-group: ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }}
